{
  "patterns": [
    {
      "name": "Timestamp",
      "regex": "\\d{4}-\\d{2}-\\d{2}[ T]\\d{2}:\\d{2}:\\d{2}",
      "replacement": "<TIMESTAMP>",
      "hash": false,
      "comment": "Matches ISO-like timestamp formats",
      "examples": [
        "2025-04-06 14:30:45",
        "2025-04-06T14:30:45"
      ]
    },
    {
      "name": "CompanyName",
      "regex": "(?:acme\\.com|globex\\.net|initech\\.org|umbrella\\.corp|stark\\.industries)",
      "replacement": "<DOMAIN>",
      "hash": false,
      "case_sensitive": false,
      "comment": "Matches specific company domains in logs or emails",
      "examples": [
        "acme.com",
        "GLOBEX.NET",
        "Stark.Industries"
      ]
    },
    {
      "name": "UniqueUserID",
      "regex": "UserID=(\\d+)",
      "replacement": "UserID=<HASHED_ID>",
      "hash": true,
      "comment": "Captures and hashes numeric user IDs",
      "examples": [
        "UserID=123456",
        "UserID=789"
      ]
    },
    {
      "name": "PhoneNumber",
      "regex": "(?:\\+972[-\\s]?)?(?:\\(?0?(?:2|3|4|5[0-8]|7[2-47]|8|9|77)(?:\\)?[-\\s]?)|\\(?0?50\\)?[-\\s]?)\\d{3}[-\\s]?\\d{4}",
      "replacement": "<PHONE>",
      "hash": false,
      "comment": "Matches various phone number formats including Israeli numbers",
      "examples": [
        "+972-50-1234567",
        "0501234567",
        "+1 (555) 123-4567"
      ]
    },
    {
      "name": "MAC Address",
      "regex": "([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})",
      "replacement": "<MAC>",
      "hash": false,
      "comment": "Matches MAC addresses with colon or hyphen separators",
      "examples": [
        "00:1A:2B:3C:4D:5E",
        "00-1A-2B-3C-4D-5E",
        "a1:b2:c3:d4:e5:f6"
      ]
    },
    {
      "name": "DomainUsername",
      "regex": "(?:acme\\.com|globex\\.net|initech\\.org|umbrella\\.corp|stark\\.industries)\\\\[A-Za-z0-9._-]+",
      "replacement": "<DOMAIN\\USERNAME>",
      "hash": false,
      "case_sensitive": false,
      "comment": "Matches domain\\username format for specific company domains",
      "examples": [
        "acme.com\\john.doe",
        "GLOBEX.NET\\jane_smith",
        "stark.industries\\tony.stark"
      ]
    },
    {
      "name": "mailNickname",
      "regex": "(?i)mailNickname\\s*[:=]\\s*([^,\\s]+)",
      "replacement": "mailNickname=<USERNAME>",
      "hash": false,
      "case_sensitive": false,
      "comment": "Matches mailNickname attribute in directory services",
      "examples": [
        "mailNickname: jdoe",
        "MAILNICKNAME=jdoe123",
        "mailNickname = john.doe"
      ]
    },
    {
      "name": "names",
      "regex": "\\b(?:John|Jane|Robert|Sarah|Michael|Emily)\\b(?:\\s+\\b(?:Doe|Smith|Johnson|Brown|Wilson|Davis)\\b)?",
      "replacement": "<NAME>",
      "hash": false,
      "case_sensitive": true,
      "comment": "Matches specific names - replace sample names (John, Jane, etc.) with names you want to sanitize",
      "examples": [
        "John",
        "Jane Doe",
        "Robert Smith"
      ]
    },
    {
      "name": "NetBIOSDomainUsername",
      "regex": "exam_ple\\\\[A-Za-z0-9._-]+",
      "replacement": "<NETBIOS_DOMAIN\\USERNAME>",
      "hash": false,
      "case_sensitive": false,
      "comment": "Matches NetBIOS domain\\username format - replace 'exam_ple' with your actual domain name",
      "examples": [
        "exam_ple\\user1",
        "exam_ple\\john.doe",
        "exam_ple\\admin_user"
      ]
    },
    {
      "name": "IPPort",
      "regex": "\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}:\\d{1,5}\\b",
      "replacement": "<IP>:<PORT>",
      "hash": false,
      "comment": "Matches IP address with port number",
      "examples": [
        "192.168.1.1:8080",
        "10.0.0.1:443"
      ]
    },
    {
      "name": "PortSpec",
      "regex": "\\b(?:port|PORT)(?:\\s+|=|:)\\d{1,5}\\b",
      "replacement": "port=<PORT>",
      "hash": false,
      "comment": "Matches port specifications in various formats",
      "examples": [
        "port=8080",
        "PORT: 443",
        "port 3306"
      ]
    },
    {
      "name": "APIKey",
      "regex": "\\b(?:api[-_]?key|API[-_]?KEY)(?:\\s+|=|:)([^\\s,;]+)",
      "replacement": "api_key=<API_KEY>",
      "hash": true,
      "comment": "Masks API keys in configuration files",
      "examples": [
        "api_key=1a2b3c4d5e6f7g8h9i0j",
        "API_KEY: xyz123456789",
        "apikey=abcdefg"
      ]
    },
    {
      "name": "SecretKey",
      "regex": "\\b(?:secret[-_]?key|SECRET[-_]?KEY)(?:\\s+|=|:)([^\\s,;]+)",
      "replacement": "secret_key=<SECRET_KEY>",
      "hash": true,
      "comment": "Masks secret keys in configuration files",
      "examples": [
        "secret_key=1a2b3c4d5e6f7g8h9i0j",
        "SECRET_KEY: xyz123456789"
      ]
    },
    {
      "name": "Password",
      "regex": "\\b(?:password|PASSWORD|pwd|PWD)(?:\\s+|=|:)([^\\s,;]+)",
      "replacement": "password=<PASSWORD>",
      "hash": true,
      "comment": "Masks passwords in configuration files",
      "examples": [
        "password=p@ssw0rd",
        "PASSWORD: secret123",
        "pwd=mysecret"
      ]
    },
    {
      "name": "DatabaseURL",
      "regex": "(?:DATABASE_URL|database_url|DB_URL|db_url)(?:\\s+|=|:)([^\\s]+)",
      "replacement": "database_url=<DB_URL>",
      "hash": true,
      "comment": "Masks database connection URLs",
      "examples": [
        "DATABASE_URL=postgres://user:password@localhost:5432/db",
        "db_url=mysql://root:secret@127.0.0.1/mydb"
      ]
    },
    {
      "name": "ConnectionString",
      "regex": "(?:connection[-_]?string|CONNECTION[-_]?STRING)(?:\\s+|=|:)([^\\n\"']+)",
      "replacement": "connection_string=<CONNECTION_STRING>",
      "hash": true,
      "comment": "Masks database connection strings",
      "examples": [
        "connection_string=Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password=myPassword;",
        "CONNECTION_STRING: Data Source=server;Initial Catalog=database;User ID=username;Password=password"
      ]
    },
    {
      "name": "JWTToken",
      "regex": "(?:jwt|JWT|bearer|Bearer)(?:\\s+|:)([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_.+/=]*)",
      "replacement": "jwt=<JWT_TOKEN>",
      "hash": true,
      "comment": "Masks JWT tokens",
      "examples": [
        "jwt eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
        "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      ]
    },
    {
      "name": "AccessToken",
      "regex": "\\b(?:access[-_]?token|ACCESS[-_]?TOKEN)(?:\\s+|=|:)([^\\s,;]+)",
      "replacement": "access_token=<ACCESS_TOKEN>",
      "hash": true,
      "comment": "Masks access tokens in configuration files",
      "examples": [
        "access_token=1a2b3c4d5e6f7g8h9i0j",
        "ACCESS_TOKEN: xyz123456789"
      ]
    },
    {
      "name": "RefreshToken",
      "regex": "\\b(?:refresh[-_]?token|REFRESH[-_]?TOKEN)(?:\\s+|=|:)([^\\s,;]+)",
      "replacement": "refresh_token=<REFRESH_TOKEN>",
      "hash": true,
      "comment": "Masks refresh tokens in configuration files",
      "examples": [
        "refresh_token=1a2b3c4d5e6f7g8h9i0j",
        "REFRESH_TOKEN: xyz123456789"
      ]
    }
  ]
}
